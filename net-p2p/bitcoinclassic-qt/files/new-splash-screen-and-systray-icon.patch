--- a/src/qt/bitcoin.qrc
+++ b/src/qt/bitcoin.qrc
@@ -1,6 +1,7 @@
 <!DOCTYPE RCC><RCC version="1.0">
     <qresource prefix="/icons">
         <file alias="bitcoin">res/icons/bitcoin.png</file>
+        <file alias="bitcoin-systray">res/icons/bitcoin-systray.png</file>
         <file alias="address-book">res/icons/address-book.png</file>
         <file alias="quit">res/icons/quit.png</file>
         <file alias="send">res/icons/send.png</file>
--- a/src/qt/forms/helpmessagedialog.ui
+++ b/src/qt/forms/helpmessagedialog.ui
@@ -55,7 +55,7 @@
         </size>
        </property>
        <property name="pixmap">
-        <pixmap resource="../bitcoin.qrc">:/icons/bitcoin</pixmap>
+        <pixmap resource="../bitcoin.qrc">:/icons/bitcoin-systray</pixmap>
        </property>
        <property name="scaledContents">
         <bool>true</bool>
--- a/src/qt/networkstyle.cpp
+++ b/src/qt/networkstyle.cpp
@@ -1,4 +1,5 @@
 // Copyright (c) 2014 The Bitcoin Core developers
+// Copyright (C) 2016 The Bitcoin Classic developers
 // Distributed under the MIT software license, see the accompanying
 // file COPYING or http://www.opensource.org/licenses/mit-license.php.
 
@@ -9,6 +10,8 @@
 
 #include <QApplication>
 
+#include <stdexcept>
+
 static const struct {
     const char *networkId;
     const char *appName;
@@ -17,67 +20,62 @@
     const char *titleAddText;
 } network_styles[] = {
     {"main", QAPP_APP_NAME_DEFAULT, 0, 0, ""},
-    {"test", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP("SplashScreen", "[testnet]")},
+    {"test", QAPP_APP_NAME_TESTNET, 70, 43, QT_TRANSLATE_NOOP("SplashScreen", "[testnet]")},
     {"regtest", QAPP_APP_NAME_TESTNET, 160, 30, "[regtest]"}
 };
 static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);
 
-// titleAddText needs to be const char* for tr()
-NetworkStyle::NetworkStyle(const QString &appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *titleAddText):
-    appName(appName),
-    titleAddText(qApp->translate("SplashScreen", titleAddText))
+static QImage fixIcon(const QImage &image, int iconColorHueShift, int iconColorSaturationReduction)
 {
-    // load pixmap
-    QPixmap pixmap(":/icons/bitcoin");
-
-    if(iconColorHueShift != 0 && iconColorSaturationReduction != 0)
+    if (iconColorSaturationReduction == 0 && iconColorHueShift == 0)
+        return image;
+    QImage copy(image);
+    // traverse though lines
+    for (int y=0; y < copy.height(); y++)
     {
-        // generate QImage from QPixmap
-        QImage img = pixmap.toImage();
+        QRgb *scL = reinterpret_cast<QRgb*>(copy.scanLine(y));
 
-        int h,s,l,a;
-
-        // traverse though lines
-        for(int y=0;y<img.height();y++)
+        // loop through pixels
+        for (int x=0; x < copy.width(); x++)
         {
-            QRgb *scL = reinterpret_cast< QRgb *>( img.scanLine( y ) );
+            int h,s,l,a;
+            // preserve alpha because QColor::getHsl doesen't return the alpha value
+            a = qAlpha(scL[x]);
+            QColor col(scL[x]);
+
+            // get hue value
+            col.getHsl(&h,&s,&l);
+
+            // rotate color on RGB color circle
+            // 70° should end up with the typical "testnet" green
+            h+=iconColorHueShift;
 
-            // loop through pixels
-            for(int x=0;x<img.width();x++)
+            // change saturation value
+            if (s>iconColorSaturationReduction)
             {
-                // preserve alpha because QColor::getHsl doesen't return the alpha value
-                a = qAlpha(scL[x]);
-                QColor col(scL[x]);
-
-                // get hue value
-                col.getHsl(&h,&s,&l);
-
-                // rotate color on RGB color circle
-                // 70° should end up with the typical "testnet" green
-                h+=iconColorHueShift;
-
-                // change saturation value
-                if(s>iconColorSaturationReduction)
-                {
-                    s -= iconColorSaturationReduction;
-                }
-                col.setHsl(h,s,l,a);
-
-                // set the pixel
-                scL[x] = col.rgba();
+                s -= iconColorSaturationReduction;
             }
-        }
+            col.setHsl(h,s,l,a);
 
-        //convert back to QPixmap
-#if QT_VERSION >= 0x040700
-        pixmap.convertFromImage(img);
-#else
-        pixmap = QPixmap::fromImage(img);
-#endif
+            // set the pixel
+            scL[x] = col.rgba();
+        }
     }
+    return copy;
+}
 
-    appIcon             = QIcon(pixmap);
-    trayAndWindowIcon   = QIcon(pixmap.scaled(QSize(256,256)));
+// titleAddText needs to be const char* for tr()
+NetworkStyle::NetworkStyle(const QString &appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *titleAddText):
+    appName(appName),
+    titleAddText(qApp->translate("SplashScreen", titleAddText))
+{
+    appIcon = fixIcon(QImage(":/icons/bitcoin"), iconColorHueShift, iconColorSaturationReduction);
+    QImage toolbarIcon(":/icons/bitcoin-systray");
+    Q_ASSERT(!toolbarIcon.isNull());
+    Q_ASSERT(toolbarIcon.width() == 256); // Otherwise we will see bad stuff on screen.
+    Q_ASSERT(toolbarIcon.height() == 256);
+    toolbarIcon = fixIcon(toolbarIcon, iconColorHueShift, iconColorSaturationReduction);
+    trayAndWindowIcon = QIcon(QPixmap::fromImage(toolbarIcon));
 }
 
 const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)
--- a/src/qt/networkstyle.h
+++ b/src/qt/networkstyle.h
@@ -17,7 +17,7 @@
     static const NetworkStyle *instantiate(const QString &networkId);
 
     const QString &getAppName() const { return appName; }
-    const QIcon &getAppIcon() const { return appIcon; }
+    const QImage &getAppIcon() const { return appIcon; }
     const QIcon &getTrayAndWindowIcon() const { return trayAndWindowIcon; }
     const QString &getTitleAddText() const { return titleAddText; }
 
@@ -25,7 +25,7 @@
     NetworkStyle(const QString &appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *titleAddText);
 
     QString appName;
-    QIcon appIcon;
+    QImage appIcon;
     QIcon trayAndWindowIcon;
     QString titleAddText;
 };
--- a/src/qt/splashscreen.cpp
+++ b/src/qt/splashscreen.cpp
@@ -1,4 +1,5 @@
 // Copyright (c) 2011-2014 The Bitcoin Core developers
+// Copyright (C) 2016 The Bitcoin Classic developers
 // Distributed under the MIT software license, see the accompanying
 // file COPYING or http://www.opensource.org/licenses/mit-license.php.
 
@@ -40,37 +41,27 @@
     // define text to place
     QString titleText       = tr("Bitcoin Classic");
     QString versionText     = QString("Version %1").arg(QString::fromStdString(FormatFullVersion()));
-    QString copyrightText   = QChar(0xA9)+QString(" 2009-%1 ").arg(COPYRIGHT_YEAR) + QString(tr("The Bitcoin Core developers"));
+    QString copyrightText   = QChar(0xA9)+QString(" 2009-%1 ").arg(COPYRIGHT_YEAR) + QString(tr("The Bitcoin developers"));
     QString titleAddText    = networkStyle->getTitleAddText();
 
     QString font            = QApplication::font().toString();
 
     // create a bitmap according to device pixelratio
-    QSize splashSize(480*devicePixelRatio,320*devicePixelRatio);
-    pixmap = QPixmap(splashSize);
+    QSize splashSize(600*devicePixelRatio, 400*devicePixelRatio);
+    QImage image = QImage(splashSize, QImage::Format_ARGB32);
 
 #if QT_VERSION > 0x050100
     // change to HiDPI if it makes sense
-    pixmap.setDevicePixelRatio(devicePixelRatio);
+    image.setDevicePixelRatio(devicePixelRatio);
 #endif
 
-    QPainter pixPaint(&pixmap);
+    QPainter pixPaint(&image);
     pixPaint.setPen(QColor(100,100,100));
 
-    // draw a slightly radial gradient
-    QRadialGradient gradient(QPoint(0,0), splashSize.width()/devicePixelRatio);
-    gradient.setColorAt(0, Qt::white);
-    gradient.setColorAt(1, QColor(247,247,247));
-    QRect rGradient(QPoint(0,0), splashSize);
-    pixPaint.fillRect(rGradient, gradient);
-
     // draw the bitcoin icon, expected size of PNG: 1024x1024
-    QRect rectIcon(QPoint(-150,-122), QSize(430,430));
-
-    const QSize requiredSize(1024,1024);
-    QPixmap icon(networkStyle->getAppIcon().pixmap(requiredSize));
-
-    pixPaint.drawPixmap(rectIcon, icon);
+    QImage icon = networkStyle->getAppIcon();
+    pixPaint.drawImage(QPoint(), icon.scaled(splashSize.width(), splashSize.height(),
+                Qt::IgnoreAspectRatio, Qt::SmoothTransformation));
 
     // check font size and drawing with
     pixPaint.setFont(QFont(font, 33*fontFactor));
@@ -84,7 +75,8 @@
     pixPaint.setFont(QFont(font, 33*fontFactor));
     fm = pixPaint.fontMetrics();
     titleTextWidth  = fm.width(titleText);
-    pixPaint.drawText(pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight,paddingTop,titleText);
+    pixPaint.setPen(Qt::white);
+    pixPaint.drawText(image.width()/devicePixelRatio-titleTextWidth-paddingRight,paddingTop,titleText);
 
     pixPaint.setFont(QFont(font, 15*fontFactor));
 
@@ -95,11 +87,11 @@
         pixPaint.setFont(QFont(font, 10*fontFactor));
         titleVersionVSpace -= 5;
     }
-    pixPaint.drawText(pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);
+    pixPaint.drawText(image.width()/devicePixelRatio-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);
 
     // draw copyright stuff
     pixPaint.setFont(QFont(font, 10*fontFactor));
-    pixPaint.drawText(pixmap.width()/devicePixelRatio-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);
+    pixPaint.drawText(image.width()/devicePixelRatio-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);
 
     // draw additional text if special network
     if(!titleAddText.isEmpty()) {
@@ -108,7 +100,7 @@
         pixPaint.setFont(boldFont);
         fm = pixPaint.fontMetrics();
         int titleAddTextWidth  = fm.width(titleAddText);
-        pixPaint.drawText(pixmap.width()/devicePixelRatio-titleAddTextWidth-10,15,titleAddText);
+        pixPaint.drawText(image.width()/devicePixelRatio-titleAddTextWidth-10,15,titleAddText);
     }
 
     pixPaint.end();
@@ -117,12 +109,15 @@
     setWindowTitle(titleText + " " + titleAddText);
 
     // Resize window and move to center of desktop, disallow resizing
-    QRect r(QPoint(), QSize(pixmap.size().width()/devicePixelRatio,pixmap.size().height()/devicePixelRatio));
+    QRect r(QPoint(), QSize(image.size().width()/devicePixelRatio,image.size().height()/devicePixelRatio));
+
     resize(r.size());
     setFixedSize(r.size());
     move(QApplication::desktop()->screenGeometry().center() - r.center());
 
     subscribeToCoreSignals();
+
+    pixmap = QPixmap::fromImage(image);
 }
 
 SplashScreen::~SplashScreen()
@@ -141,8 +136,7 @@
     QMetaObject::invokeMethod(splash, "showMessage",
         Qt::QueuedConnection,
         Q_ARG(QString, QString::fromStdString(message)),
-        Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter),
-        Q_ARG(QColor, QColor(55,55,55)));
+        Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter));
 }
 
 static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress)
@@ -178,11 +172,10 @@
 #endif
 }
 
-void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)
+void SplashScreen::showMessage(const QString &message, int alignment)
 {
     curMessage = message;
     curAlignment = alignment;
-    curColor = color;
     update();
 }
 
@@ -191,7 +184,7 @@
     QPainter painter(this);
     painter.drawPixmap(0, 0, pixmap);
     QRect r = rect().adjusted(5, 5, -5, -5);
-    painter.setPen(curColor);
+    painter.setPen(Qt::white);
     painter.drawText(r, curAlignment, curMessage);
 }
 
--- a/src/qt/splashscreen.h
+++ b/src/qt/splashscreen.h
@@ -32,7 +32,7 @@
     void slotFinish(QWidget *mainWin);
 
     /** Show message and progress */
-    void showMessage(const QString &message, int alignment, const QColor &color);
+    void showMessage(const QString &message, int alignment);
 
 private:
     /** Connect core signals to splash screen */
@@ -42,7 +42,6 @@
 
     QPixmap pixmap;
     QString curMessage;
-    QColor curColor;
     int curAlignment;
 };
 
